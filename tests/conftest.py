# Copyright (C) 2020 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""Unit tests utils."""

import difflib
from pathlib import Path
from typing import Optional

# note: importing apitools modifies sys.path to access SCADE APIs
import ansys.scade.apitools  # noqa: F401

# must be imported after apitools
# isort: split
import scade
import scade.model.project.stdproject as std
import scade.model.suite as suite
import scade.model.suite.displaycoupling as dc

# stub the proxy's entries
import ansys.scade.wux.test.sctoc_stub  # noqa: F401


def load_session(*paths: Path) -> suite.Session:
    """Create an instance of Session instance and load the requested models."""
    session = suite.Session()
    for path in paths:
        session.load2(str(path))
    return session


def load_sdy_application(
    mapping: Optional[Path], model: suite.Model, *displays: Path
) -> dc.SdyApplication:
    """Load a Scade Suite - Display mapping file in a separate environment."""
    app = dc.SdyApplication()
    for display in displays:
        app.load_sdy_project_tcl(str(display))
    if mapping:
        app.load_mapping_file_tcl(str(mapping))
        # bind both models
        app.mapping_file.model = model
    return app


def load_project(path: Path) -> std.Project:
    """
    Load a Scade project in a separate environment.

    Note: Undocumented API.
    """
    project = scade.load_project(str(path))
    return project


def cmp_file(reference: Path, result: Path, n=3, linejunk=None):
    """Return the differences between the reference and the result file."""
    if linejunk:
        with reference.open() as f:
            ref_lines = [_ for _ in f if not linejunk(_)]
        with result.open() as f:
            res_lines = [_ for _ in f if not linejunk(_)]
    else:
        ref_lines = reference.open().read().split('\n')
        res_lines = result.open().read().split('\n')

    diff = difflib.context_diff(ref_lines, res_lines, str(reference), str(result), n=n)
    return diff


def diff_files(ref: Path, dst: Path) -> bool:
    def junk(line: str) -> bool:
        return ' generated by ' in line

    print('compare', str(ref), str(dst))
    diffs = cmp_file(ref, dst, linejunk=junk)
    failure = False
    for d in diffs:
        print(d.rstrip('\r\n'))
        failure = True
    return failure
