[{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/index.html#the-wuxmodulepy-module","title":"The wuxmodule.py module","text":"The wuxmodule.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/index.html#summary","title":"The wuxmodule.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nWuxModule\n\nImplements the generation module interface for WUX2_MODULE.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/index.html#description","title":"The wuxmodule.py module > Description","text":"Description\n\nSCADE Code Generation Module for utility SCADE Code Generation Services.\n\nThese services can be included\non demand by SCADE Code Generator extensions: target, adaptor or extension."},{"objectID":"Home","href":"api/ansys/scade/wux/register/main.html#ansysscadewuxregistermain","title":"ansys.scade.wux.register.main","text":"ansys.scade.wux.register.main\n\n\n\nansys.scade.wux.register.main()\n\nImplement the ansys.scade.wux.register packages’s project script."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/write_indent.html#ansysscadewuxwuxwrite_indent","title":"ansys.scade.wux.wux.write_indent","text":"ansys.scade.wux.wux.write_indent\n\n\n\nansys.scade.wux.wux.write_indent(f: io.TextIOBase, tab: str, text: str)\n\nWrite a multi-lined text with an indentation.\n\nThe function splits the test into lines and writes each line\nwith the prefix tab.\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\ntab\n\npython:str\n\nPrefix.\n\ntext\n\npython:str\n\nInput text."},{"objectID":"Home","href":"api/ansys/scade/wux/register/index.html#the-registerpy-module","title":"The register.py module","text":"The register.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/register/index.html#summary","title":"The register.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nmain\n\nImplement the ansys.scade.wux.register packages’s project script.\n\nregister\n\nImplement the ansys.scade.registry/register entry point.\n\nAttributes\n\n\n\n\n\ncode\n\n\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/register/index.html#description","title":"The register.py module > Description","text":"Description\n\nRegisters the Code Generator extension registry files (SRG).\n\nRefer to the installation\nsteps for more information.\n\nIt addresses SCADE 2024 R2 and prior releases.\nSCADE 2025 R1 and later use the package’s\nansys.scade.registry entry point."},{"objectID":"Home","href":"api/ansys/scade/wux/register/index.html#module-detail","title":"The register.py module > Module detail","text":"Module detail\n\n\n\nregister.code = 0\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/index.html#the-ansysscadewux-library","title":"The ansys.scade.wux library","text":"The ansys.scade.wux library\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/index.html#summary","title":"The ansys.scade.wux library > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ngowrapper\n\nGeneric wrapper for hosting combined SCADE Suite integration extensions.\n\nhooks\n\nGeneric extension for defining Simulation C/C++ hooks.\n\nregister\n\nRegisters the Code Generator extension registry files (SRG).\n\nunregister\n\nUnregisters the Code Generator extension registry files (SRG).\n\nwux\n\nProvides a collection of functions for developing wrappers.\n\nwuxmodule\n\nSCADE Code Generation Module for utility SCADE Code Generation Services.\n\nFunctions\n\n\n\n\n\nget_srg_name\n\nReturn the name of the registration file for Ansys SCADE IDE.\n\nsrg\n\nReturn the path of the SCADE Studio registry file.\n\nAttributes\n\n\n\n\n\n__version__\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/index.html#description","title":"The ansys.scade.wux library > Description","text":"Description\n\nProvides a Generic code integration wrapper and utilities for SCADE."},{"objectID":"Home","href":"api/ansys/scade/wux/index.html#module-detail","title":"The ansys.scade.wux library > Module detail","text":"Module detail\n\n\n\nwux.__version__\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/get_specifications.html#ansysscadewuxwuxget_specifications","title":"ansys.scade.wux.wux.get_specifications","text":"ansys.scade.wux.wux.get_specifications\n\n\n\nansys.scade.wux.wux.get_specifications(project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration) -> List[scade.model.suite.displaycoupling.Specification]\n\nReturn the list of graphical panel specifications selected for the input configuration.\n\nThis function adds a new prefix attribute to the specifications.\n\nParameters\n\nproject\n\nProject\n\nInput project.\n\nconfiguration\n\nConfiguration\n\nInput configuration.\n\nReturns\n\nList[Specification]\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/add_libraries.html#ansysscadewuxwuxadd_libraries","title":"ansys.scade.wux.wux.add_libraries","text":"ansys.scade.wux.wux.add_libraries\n\n\n\nansys.scade.wux.wux.add_libraries(paths: List[pathlib.Path])\n\nRequest the Code Generator to add object or library files to the Makefile.\n\nThis function may be called by different generation services.\nIt caches the added files so that they are not added twice to the makefile.\n\nRefer to add_obj_files under Adding Make Directives in section 3\nof the SCADE Python API Guide in the SCADE Suite documentation.\n\nParameters\n\npaths\n\nList[Path]\n\nPaths of the files to be added to the makefile."},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/WuxModule.html#wuxmodule","title":"WuxModule","text":"WuxModule\n\n\n\nclass ansys.scade.wux.wuxmodule.WuxModule\n\nImplements the generation module interface for WUX2_MODULE.\n\nRefer to usage/services:generation services to for its usage.\n\nRefer to the Generation Module section in chapter 3 of the SCADE Python API Guide\nin the SCADE Suite documentation."},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/WuxModule.html#overview","title":"WuxModule > Overview","text":"Overview\n\nConstructors\n\n\n\n\n\nget_services\n\nDeclare all the provided utility services."},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/WuxModule.html#import-detail","title":"WuxModule > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/scade/wux/wuxmodule/WuxModule.html#method-detail","title":"WuxModule > Method detail","text":"Method detail\n\n\n\nclassmethod WuxModule.get_services()\n\nDeclare all the provided utility services."},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/index.html#the-hookspy-module","title":"The hooks.py module","text":"The hooks.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/index.html#summary","title":"The hooks.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nHooks\n\nImplements the C/C++ Simulation Hooks (WUX2_HOOKS) extension.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/index.html#description","title":"The hooks.py module > Description","text":"Description\n\nGeneric extension for defining Simulation C/C++ hooks.\n\nThis activates WUX2_CTX and WUX2_SIMU_EXT.\n\nIt does not have any settings and generates no code.\n\nIt is up to the user to add the hooks implementation files\nto the SCADE Suite project."},{"objectID":"Home","href":"api/ansys/scade/wux/get_srg_name.html#ansysscadewuxget_srg_name","title":"ansys.scade.wux.get_srg_name","text":"ansys.scade.wux.get_srg_name\n\n\n\nansys.scade.wux.get_srg_name() -> str\n\nReturn the name of the registration file for Ansys SCADE IDE.\n\nIt addresses SCADE 2024 R2 and prior releases.\nSCADE 2025 R1 and above use the package’s\nansys.scade.registry entry point."},{"objectID":"Home","href":"runtime/ctxext.html#wuxctxexth","title":"WuxCtxExt.h","text":"WuxCtxExt.h\n\nDeclarations of the functions generated by the service WuxContext. \n\nFunctions\n\n\n\nvoid WuxInit()\n\nCall the initialization functions for all root operators. \n\n\n\nvoid WuxReset()\n\nCall the reset functions for all root operators. \n\n\n\nvoid WuxCycle()\n\nCall the cyclic functions for all root operators. \n\n\n\ndouble WuxGetPeriod()\n\nReturn the period specified in the Code Integration settings, in seconds. \n\nReturns\n\ndouble "},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/main.html#ansysscadewuxunregistermain","title":"ansys.scade.wux.unregister.main","text":"ansys.scade.wux.unregister.main\n\n\n\nansys.scade.wux.unregister.main()\n\nImplement the ansys.scade.wux.unregister packages’s project script."},{"objectID":"Home","href":"runtime/sdyproxy.html#wuxsdyproxyh","title":"WuxSdyProxy.h","text":"WuxSdyProxy.h\n\nDeclarations of the functions generated by the service SdyProxy. \n\nFunctions\n\n\n\nint WuxLoadSdyDlls(void *hinstDll)\n\nLoad the DLLs of the graphical panels. \n\nReturns\n\nint 1 if successful, otherwise 0. \n\n\n\nint WuxUnloadSdyDlls(void *hinstDll)\n\nUnload the DLLs of the graphical panels. \n\nReturns\n\nint 1 if successful, otherwise 0. "},{"objectID":"Home","href":"api/ansys/scade/wux/wux/gen_header.html#ansysscadewuxwuxgen_header","title":"ansys.scade.wux.wux.gen_header","text":"ansys.scade.wux.wux.gen_header\n\n\n\nansys.scade.wux.wux.gen_header(f: io.TextIOBase, banner: str, start_comment: str = '/* ', end_comment: str = ' */')\n\nWrite a generated by comment.\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nbanner\n\npython:str\n\nText to write.\n\nstart_comment\n\npython:str\n\nStart comment, default “/* “.\n\nend_comment\n\npython:str\n\nEnd comment, default “ */”."},{"objectID":"Home","href":"runtime/index.html#runtime-interfaces","title":"Runtime interfaces","text":"Runtime interfaces\n\nThis section is the reference for the C/C++ interfaces of the code\ngenerated by the generation services of this package, as well as their\nruntime code.\n\nThe header files are in the site-packages/ansys/scade/wux/include directory.\n\nThe runtime implementation files that are not generated are in the\nsite-packages/ansys/scade/wux/lib directory."},{"objectID":"Home","href":"runtime/index.html#headers","title":"Runtime interfaces > Headers","text":"Headers\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#220---september-02-2025","title":"Release notes > 2.2.0 - September 02, 2025","text":"2.2.0 - September 02, 2025\n\nAdded\n\n\n\n\n\nFeat: Add a bundle extension for defining C/C++ simulation hooks.\n\n#43\n\nFixed\n\n\n\n\n\nfix: Limit flit version\n\n#25\n\nfix: Add the SCADE Display proxy generated file to the list of integration files\n\n#31\n\nMiscellaneous\n\n\n\n\n\nFix: enhance robustness\n\n#34\n\nCi: bump ansys/actions from 8 to 10 in the actions group\n\n#35\n\nCi: bump the actions group with 2 updates\n\n#36, #45\n\nBuild(deps): bump the dependencies group with 8 updates\n\n#37\n\nDocs: update contributors.md with the latest contributors\n\n#38\n\nDocs: Update CONTRIBUTORS.md with the latest contributors\n\n#39\n\nDocumentation\n\n\n\n\n\nchore: update CHANGELOG for v2.1.0\n\n#21\n\nchore: update CHANGELOG for v2.1.1\n\n#24\n\nchore: update CHANGELOG for v2.1.3\n\n#29"},{"objectID":"Release notes","href":"changelog.html#213---april-30-2025","title":"Release notes > 2.1.3 - April 30, 2025","text":"2.1.3 - April 30, 2025\n\nFixed\n\n\n\n\n\nfix: Blocking issues\n\n#28"},{"objectID":"Release notes","href":"changelog.html#211---march-20-2025","title":"Release notes > 2.1.1 - March 20, 2025","text":"2.1.1 - March 20, 2025\n\nAdded\n\n\n\n\n\nfeat: Add register and unregister entry points for Extensions Manager\n\n#22\n\nMaintenance\n\n\n\n\n\nci: Specify the version of Python for updating the change log\n\n#23"},{"objectID":"Release notes","href":"changelog.html#210---2025-01-20","title":"Release notes > 2.1.0 - 2025-01-20","text":"2.1.0 - 2025-01-20"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: technical review #17"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: Avoid name conflict with legacy WrapUtilsEx 1.x #19\n\nfix: changelog action inputs #20"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v2.0.1 #12\n\nchore: update CHANGELOG for v2.0.2 #14\n\ndocs: doc review #15\n\ndocs: Add minimal doc-strings for test stubs and implementation files #16"},{"objectID":"Release notes","href":"changelog.html#test","title":"Release notes > Test","text":"Test\n\ntest: Complete unit tests for SCADE Suite - SCADE Display connections #18"},{"objectID":"Release notes","href":"changelog.html#202---2024-10-10","title":"Release notes > 2.0.2 - 2024-10-10","text":"2.0.2 - 2024-10-10"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nRefactor: Perform a separate registration for SCADE releases based on Python 3.7 or 3.10 #13"},{"objectID":"Release notes","href":"changelog.html#201---2024-10-06","title":"Release notes > 2.0.1 - 2024-10-06","text":"2.0.1 - 2024-10-06"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: Add an action to update the change log before creating a release #8"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nmaint: Finalize the configuration #6\n\nci: fix change log #9\n\nrefactor: Refactor the classes and code to enhance reusability and testability #10"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nci: Fix the url for coverage #7"},{"objectID":"Home","href":"api/ansys/scade/wux/srg.html#ansysscadewuxsrg","title":"ansys.scade.wux.srg","text":"ansys.scade.wux.srg\n\n\n\nansys.scade.wux.srg() -> str\n\nReturn the path of the SCADE Studio registry file.\n\nThis function implements the entry point “ansys.scade.registry/srg”\nintroduced in SCADE 2025 R1. It avoids creating an explicit srg file\nin %APPDATA%\\Scade\\Customize when the package is installed."},{"objectID":"Home","href":"usage/library.html#library","title":"Library","text":"Library\n\nThe module ansys.scade.wux.wux contains helpers for generating code.\n\nIt also maintains global instances of WrapGen API classes that give access\nto the C generated code mapping file data, or the C root operators interfaces.\n\nA set of functions allows generation services to declare resources for the\nmakefile:\n\nSource files\n\nInclude directories\n\nObject files or libraries\n\nPreprocessor definitions\n\nThe mf, mh and\nips variables are initialized by the\nusage/services:Context generation service. They remain uninitialized\nif this service is not explicitly requested by a wrapper."},{"objectID":"Home","href":"runtime/sdyext.html#wuxsdyexth","title":"WuxSdyExt.h","text":"WuxSdyExt.h\n\nDeclarations of the functions generated by the service SdyExt. \n\nFunctions\n\n\n\nvoid WuxSdyInit()\n\nCall the initialization functions for all graphical panels. \n\n\n\nvoid WuxSdyDraw()\n\nDraw all the graphical panels. \n\n\n\nvoid WuxSdySetInputs()\n\nSet the graphical panels’ input plugs from the root operators. \n\n\n\nvoid WuxSdyGetOutputs()\n\nUpdate the root operator’s inputs from the graphical panels’ plugs. \n\n\n\nint WuxSdyCancelled()\n\nReturn whether a graphical panel window has been closed. \n\nReturns\n\nint 1 if a window has been closed, otherwise 0. "},{"objectID":"Home","href":"api/ansys/scade/wux/wux/index.html#the-wuxpy-module","title":"The wux.py module","text":"The wux.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/index.html#summary","title":"The wux.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nadd_cpp_options\n\nAdd the required compiler/linker options for C++ code.\n\nadd_definitions\n\nRequest the Code Generator to add preprocessor definitions to the Makefile.\n\nadd_includes\n\nRequest the Code Generator to add include directories directives to the Makefile.\n\nadd_libraries\n\nRequest the Code Generator to add object or library files to the Makefile.\n\nadd_sources\n\nRequest the Code Generator to add sources files to the Makefile for C build.\n\ngen_end_protect\n\nWrite the end of a protection macro for a C header file.\n\ngen_footer\n\nWrite an end of file comment.\n\ngen_header\n\nWrite a generated by comment.\n\ngen_includes\n\nWrite C include directives for a list of files.\n\ngen_start_protect\n\nWrite the beginning of a protection macro for a C header file.\n\nget_sdy_applications\n\nReturn the loaded SCADE models.\n\nget_sessions\n\nReturn the loaded SCADE models.\n\nget_specifications\n\nReturn the list of graphical panel specifications selected for the input configuration.\n\nreset\n\nReset the global module’s global variables.\n\nset_sdy_applications\n\nSet the list of loaded SCADE Display Coupling applications.\n\nset_sessions\n\nSet the list of loaded SCADE models.\n\nwrite_indent\n\nWrite a multi-lined text with an indentation.\n\nwriteln\n\nWrite a text with a level of indentation.\n\nAttributes\n\n\n\n\n\nips\n\nList of WrapGen API InterfacePrinter instances for the root operators.\n\nmf\n\nKCG Mapping File data.\n\nmh\n\nWrapGen API MappingHelpers instance for the current project.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/index.html#description","title":"The wux.py module > Description","text":"Description\n\nProvides a collection of functions for developing wrappers."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/index.html#module-detail","title":"The wux.py module > Module detail","text":"Module detail\n\n\n\nwux.ips: List[scade.code.suite.wrapgen.c.InterfacePrinter] = []\n\nList of WrapGen API InterfacePrinter instances for the root operators.\n\nThis attribute is initialized by the WuxContext generation service.\n\n\n\nwux.mf: scade.code.suite.mapping.c.MappingFile | None = None\n\nKCG Mapping File data.\n\nThis attribute is initialized by the WuxContext generation service.\n\n\n\nwux.mh: scade.code.suite.wrapgen.model.MappingHelpers | None = None\n\nWrapGen API MappingHelpers instance for the current project.\n\nThis attribute is initialized by the WuxContext generation service."},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/Hooks.html#hooks","title":"Hooks","text":"Hooks\n\n\n\nclass ansys.scade.wux.hooks.Hooks\n\nImplements the C/C++ Simulation Hooks (WUX2_HOOKS) extension.\n\nRefer to Wrapper for its usage.\n\nRefer to Generation Module in the User Documentation,\nsection 3/ Code Integration Toolbox/Declaring Code Generator Extension."},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/Hooks.html#overview","title":"Hooks > Overview","text":"Overview\n\nConstructors\n\n\n\n\n\nget_services\n\nDeclare the generation service GoWrapper.\n\nMethods\n\n\n\n\n\ngenerate\n\nGenerate the code for this generation service.\n\ninit\n\nDeclare the required generation services and the execution order."},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/Hooks.html#import-detail","title":"Hooks > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/scade/wux/hooks/Hooks.html#method-detail","title":"Hooks > Method detail","text":"Method detail\n\n\n\nHooks.generate(target_dir: str, project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration)\n\nGenerate the code for this generation service.\n\nRefer to Generation Service in section 3 of the SCADE Python API Guide\nin the SCADE Suite documentation.\n\nParameters\n\ntarget_dir\n\npython:str\n\nTarget directory for the code generation.\n\nproject\n\nProject\n\nInput SCADE Suite project.\n\nconfiguration\n\nconfiguration\n\nSCADE Suite configuration selected for the code generation.\n\n\n\nclassmethod Hooks.get_services()\n\nDeclare the generation service GoWrapper.\n\n\n\nHooks.init(target_dir: str, project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration)\n\nDeclare the required generation services and the execution order.\n\nRefer to Generation Service in section 3 of the SCADE Python API Guide\nin the SCADE Suite documentation.\n\nParameters\n\ntarget_dir\n\npython:str\n\nTarget directory for the code generation.\n\nproject\n\nProject\n\nInput SCADE Suite project.\n\nconfiguration\n\nconfiguration\n\nSCADE Suite configuration selected for the code generation."},{"objectID":"Home","href":"api/ansys/scade/wux/register/register.html#ansysscadewuxregisterregister","title":"ansys.scade.wux.register.register","text":"ansys.scade.wux.register.register\n\n\n\nansys.scade.wux.register.register() -> Tuple[int, str]\n\nImplement the ansys.scade.registry/register entry point."},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-scade-wux endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/get_sessions.html#ansysscadewuxwuxget_sessions","title":"ansys.scade.wux.wux.get_sessions","text":"ansys.scade.wux.wux.get_sessions\n\n\n\nansys.scade.wux.wux.get_sessions() -> List[scade.model.suite.Session]\n\nReturn the loaded SCADE models.\n\nThe nominal use case consists in calling SCADE Suite API’s get_roots(),\nunless the list of sessions has already been initialized,\nfor unit testing for example.\n\nReturns\n\nList[Session]\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/set_sdy_applications.html#ansysscadewuxwuxset_sdy_applications","title":"ansys.scade.wux.wux.set_sdy_applications","text":"ansys.scade.wux.wux.set_sdy_applications\n\n\n\nansys.scade.wux.wux.set_sdy_applications(sdy_applications: List[scade.model.suite.displaycoupling.SdyApplication])\n\nSet the list of loaded SCADE Display Coupling applications.\n\nThis function is present only for unit testing, where SCADE Display Coupling API’s\nget_roots() cannot be used.\n\nParameters\n\nsdy_applications\n\nList[SdyApplication]\n\nList of loaded SCADE Display Coupling models."},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/index.html#the-unregisterpy-module","title":"The unregister.py module","text":"The unregister.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/index.html#summary","title":"The unregister.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nmain\n\nImplement the ansys.scade.wux.unregister packages’s project script.\n\nunregister\n\nImplement the ansys.scade.registry/unregister entry point.\n\nAttributes\n\n\n\n\n\ncode\n\n\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/index.html#description","title":"The unregister.py module > Description","text":"Description\n\nUnregisters the Code Generator extension registry files (SRG).\n\nRefer to the installation\nsteps for more information.\n\nIt addresses SCADE 2024 R2 and prior releases.\nSCADE 2025 R1 and later use the package’s\nansys.scade.registry entry point."},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/index.html#module-detail","title":"The unregister.py module > Module detail","text":"Module detail\n\n\n\nunregister.code = 0\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/gen_footer.html#ansysscadewuxwuxgen_footer","title":"ansys.scade.wux.wux.gen_footer","text":"ansys.scade.wux.wux.gen_footer\n\n\n\nansys.scade.wux.wux.gen_footer(f: io.TextIOBase, start_comment: str = '/* ', end_comment: str = ' */')\n\nWrite an end of file comment.\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nstart_comment\n\npython:str\n\nStart comment, default “/* “.\n\nend_comment\n\npython:str\n\nEnd comment, default “ */”."},{"objectID":"Home","href":"getting-started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nTo use Ansys SCADE Wrapper Tools, you must have a valid license for Ansys SCADE.\n\nFor information on getting a licensed copy, see the\nAnsys SCADE Suite\npage on the Ansys website."},{"objectID":"Home","href":"getting-started/index.html#requirements","title":"Getting started > Requirements","text":"Requirements\n\nThe ansys-scade-wux package supports only the versions of Python delivered with\nAnsys SCADE, starting from 2023 R2:\n\n2023 R2 and later: Python 3.10"},{"objectID":"Home","href":"getting-started/index.html#install-in-user-mode","title":"Getting started > Install in user mode","text":"Install in user mode\n\nThe following steps are for installing Ansys SCADE Wrapper Tools in user mode.\nIf you want to contribute to Ansys SCADE Wrapper Tools,\nsee contribute_scade_wux for the steps for installing in developer mode.\n\nBefore installing Ansys SCADE Wrapper Tools in user mode, run this command\nto ensure that you have the latest version of pip:\n\nRun this command to install Ansys SCADE Wrapper Tools:\n\nFor Ansys SCADE releases 2024 R2 and below, run this command to complete the installation:\n\nThis additional step is not required when installing the package with\nAnsys SCADE Extension Manager.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/set_sessions.html#ansysscadewuxwuxset_sessions","title":"ansys.scade.wux.wux.set_sessions","text":"ansys.scade.wux.wux.set_sessions\n\n\n\nansys.scade.wux.wux.set_sessions(sessions: List[scade.model.suite.Session])\n\nSet the list of loaded SCADE models.\n\nThis function is present only for unit testing, where SCADE Suite API’s get_roots()\ncannot be used.\n\nParameters\n\nsessions\n\nList[Session]\n\nList of loaded SCADE Suite models."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/get_sdy_applications.html#ansysscadewuxwuxget_sdy_applications","title":"ansys.scade.wux.wux.get_sdy_applications","text":"ansys.scade.wux.wux.get_sdy_applications\n\n\n\nansys.scade.wux.wux.get_sdy_applications() -> List[scade.model.suite.displaycoupling.SdyApplication]\n\nReturn the loaded SCADE models.\n\nThe nominal use case consists in calling SCADE Display Coupling API’s get_roots(),\nunless the list of applications has already been initialized,\nfor unit testing for example.\n\nReturns\n\nList[Session]\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/index.html#the-gowrapperpy-module","title":"The gowrapper.py module","text":"The gowrapper.py module\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/index.html#summary","title":"The gowrapper.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nGoWrapper\n\nImplements the Generic Integration (WUX2_GOWRP) generation module.\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/index.html#description","title":"The gowrapper.py module > Description","text":"Description\n\nGeneric wrapper for hosting combined SCADE Suite integration extensions.\n\n99% of the generation is ensured by the extensions\n\nThe wrapper declares the target\n\nDesign note: the core extensions register to this wrapper which gathers the\nmakefile elements to build the executable. The communication between the\nwrapper and the extensions is done through the global variables of\nthe wux module."},{"objectID":"Home","href":"runtime/a661ext.html#wuxa661exth","title":"WuxA661Ext.h","text":"WuxA661Ext.h\n\nDeclarations of the functions generated by the service A661UAA. \n\nThe implementation relies on the lib/A661Connect.c runtime file, derived from SCADE/lib/A661Cosim.c delivered with Ansys SCADE. \n\nFunctions\n\n\n\nint WuxA661ConnectServer()\n\nConnect to the A661 server. \n\nReturn 1 when the connection is successful, otherwise 0.\n\nNote: This function does nothing and returns 1 when there is no UA in the project.\n\nReturns\n\nint \n\n\n\nint WuxA661DisconnectServer()\n\nDisconnect from the A661 server. \n\nReturn 1 when the disconnection is successful, otherwise 0.\n\nNote: This function does nothing and returns 1 when there is no UA in the project.\n\nReturns\n\nint \n\n\n\nvoid WuxA661SendMessages()\n\nSend the A661 messages from the root operator outputs. \n\nNote: This function is empty when there is no UA in the project. \n\n\n\nvoid WuxA661ReceiveMessages()\n\nReceive the A661 messages and update the root operator inputs. \n\nNote: This function is empty when there is no UA in the project. "},{"objectID":"Home","href":"usage/services.html#generation-services","title":"Generation services","text":"Generation services"},{"objectID":"Home","href":"usage/services.html#overview","title":"Generation services > Overview","text":"Overview\n\nThe class WuxModule defines\nthe WUX2_MODULE generation module. Its generation services are not visible\nto the end user; they must be explicitly requested by client wrappers.\n\nThe module registers all the generation services included to the Code Generator.\n\nAnsys SCADE Wrapper Tools provide the following generation services,\ndetailed in the next sections:\n\nContext allocation for Scade root operators (WUX2_CTX):\n\nInstantiates MappingFile, MappingHelper and InterfacePrinter\nfor the root operators.\n\nGenerates the header/source files for declaring/defining SCADE generated code contexts.\n\nNote: The current version is not expected to support options like\nseparate_io, global_root_context or root functions returning a scalar value.\n\nGenerates the Init, Reset, and Cycle functions that call the\ncorresponding functions for all the root operators.\n\nGenerates a GetPeriod function for accessing the period specified in\nthe code integration settings.\n\nSCADE Suite-Display Extension (WUX2_SDY):\n\nGenerates the glue code for connecting the generated code from the graphical panels and the SCADE models.\n\nSCADE Display Proxy Extension (WUX2_SDY_PROXY):\n\nBuilds the SCADE Display and SCADE Rapid Prototyper DLLs.\n\nGenerates proxies for loading the DLLs (avoids link editing and compiler issues).\n\nSCADE Suite UA Adaptor Extension (WUX2_UAA):\n\nRuns UA Adaptor for the (only one) root operator.\n\nGenerates the glue code for sending and receiving A661 messages.\n\nExtension for SCADE Simulator’s extensions (WUX2_SIMU_EXT):\n\nCompatible with graphical panels.\n\nAvoids defining DllMain for simulation start and stop hooks.\n\nExtension for DllMain services (WUX2_DLL_EXT):\n\nAllows several extensions to register to DllMain’s hooks."},{"objectID":"Home","href":"usage/services.html#context","title":"Generation services > Context","text":"Context\n\nThis service (WUX2_CTX) manages the integration of a root operator.\nIt generates the following files:\n\nwuxctx<project name>.h\n\nDeclaration of the contexts for the root operators.\n\nReference to <project name>_interface.h instead of declaring\nnew contexts when the current Target is the SCADE Simulator.\n\nwuxctx<project name>.c\n\nAllocation of the contexts when the current Target is not the\nSCADE Simulator, otherwise nothing.\n\nGeneration of the functions WuxInit(), WuxReset() and\nWuxCycle().\nThese functions call the related code for each root operator, when the\ncurrent Target is not the SCADE Simulator, otherwise they are empty.\n\nGeneration of the WuxGetPeriod() function that returns the\nperiod declared in the Code Integration settings.\nThe returned value is in seconds.\n\nAll the generated functions are declared in the /runtime/ctxext\nresource file and its containing directory is added to the Code Generator.\n\nThis generation service initializes the ips,\nmf and mh global variables of the\nwux module. Note that the\nips collection contains instances of a class derived from\nInterfacePrinter, that considers the SCADE Simulator’s context when the\ncode generation target is Simulator."},{"objectID":"Home","href":"usage/services.html#display-extension","title":"Generation services > Display extension","text":"Display extension\n\nThis service (WUX2_SDY) is responsible for generating the glue code\nbetween SCADE Suite and SCADE Display.\n\nIt generates the following file:\n\n<project name>_sydext.c:\n\nvoid WuxSdyInit(): Initializes the displays.\n\nvoid WuxSdyDraw(): Draws the displays.\n\nvoid WuxSdySetInputs(): Copies the mapped values from the contexts to the layers.\n\nvoid WuxSdyGetOutputs(): Copies the mapped values from the layers to the contexts.\n\nint WuxSdyCancelled(): Returns 1 if one of the display is closed.\n\nThe generated files are declared to the Code Generator with the tag WUX.\n\nThe functions are always generated to avoid link errors, but are\nempty if no graphical panel is referenced in the configuration.\n\nAll the generated functions are declared in /runtime/sdyext,\nand the containing directory is declared to the Code Generator."},{"objectID":"Home","href":"usage/services.html#display-proxy-extension","title":"Generation services > Display proxy extension","text":"Display proxy extension\n\nThis service (WUX2_SDY_PROXY) is responsible for building the DLLs for each\ngraphical panel referenced in the configuration, and for providing functions to load\nthe DLLs at runtime.\n\nIt generates the following file:\n\n<project name>_sydextprx.cpp:\n\nint WuxLoadSdyDlls(/*HINSTANCE*/ void* hinstDll): Loads all the displays.\n\nint WuxUnloadSdyDlls(/*HINSTANCE*/ void* hinstDll): Unoads all the displays.\n\nThe generated files are declared to the Code Generator with the tag WUX.\n\nThe functions are always generated to avoid link errors, but are\nempty if no graphical panel is referenced in the configuration.\n\nAll the generated functions are declared in /runtime/sdyproxy,\nand the containing directory is declared to the Code Generator.\n\nThe lib/WuxSdyProxy.cpp resource file is required and is declared to the\nCode Generator with the tag WUX."},{"objectID":"Home","href":"usage/services.html#ua-adaptor-extension","title":"Generation services > UA Adaptor extension","text":"UA Adaptor extension\n\nThis service (WUX2_UAA) is responsible for generating the definition files\n(DF) files for each A661 panel referenced in the configuration, for running\nSCADE UA Adaptor for the root operators, and for providing functions to\nsend/receive A661 messages at runtime.\n\nIt generates the following functions in wuxuaa<project name>.c:\n\nint WuxA661ConnectServer(): Connects to the A661 server,\nand return 0 on success.\n\nint WuxA661DisconnectServer(): Disconnects from the A661 server,\nand return 0 on success.\n\nvoid WuxA661ReceiveMessages(): Receives the A661 messages,\nand copies the mapped values to the contexts.\n\nvoid WuxA661SendMessages(): Gets the mapped values form the contexts,\nand sends all the A661 messages.\n\nThe generated file as well as the files generated by SCADE UA Adaptor are\ndeclared to the Code Generator with the tag WUX.\n\nThe functions are always generated to avoid link errors,\nbut are empty if no UA is referenced in the configuration.\n\nAll the generated functions are declared in /runtime/a661ext,\nand the containing directory is declared to the Code Generator.\n\nThe lib/A661Connect.c resource file is required and is declared to the\nCode Generator with the tag WUX."},{"objectID":"Home","href":"usage/services.html#simulator-extension","title":"Generation services > Simulator extension","text":"Simulator extension\n\nThis generation service was initially designed to allow the\nusage of SCADE Simulator with one or more wrappers together with\nSCADE graphical panels.\nIt was then extended to provide a generic way for integrating extensions\nwith the Wrapper Generic Integration.\nIt was not renamed for compatibility reasons.\nThe following text describes the connection to the SCADE Simulator but this\napplies to any host.\n\nThis generation service (WUX2_SIMU_EXT) does not generate new files, but\nprovides a workaround for a limitation of the SCADE Simulator interface.\nIndeed, the SCADE Simulator allows hooks thanks to functions like\nBeforeSimInit, BeforeSimStep, or AfterSimStep, when the\npreprocessor variable EXTENDED_SIM is defined.\nThis allows wrapping code, such as communications with external\nenvironments, to be executed in the SCADE Simulator without requiring imported\noperators for the I/Os.\n\nUnfortunately, if the wrapping code is used together with graphical panels,\nthe existing hook mechanism is not enough: two different pieces of code define\nthe same functions, leading to link errors.\n\nThe purpose of this generation service is to patch the file\n<project name>_interface.c generated by the SCADE Simulator Wrapper\nso that:\n\nthe file includes /runtime/simuext\n\nEXTENDED_SIM is always defined in this file\n\nall the calls to a Xxx hook function are replaced by calls to a\nWuxXxx function\n\nThe WuxXxx functions are declared in /runtime/simuext and the\ncontaining directory is declared to the Code Generator. They are implemented\nin the lib/WuxSimuExt.cpp resource file that is required, and declared to\nthe Code Generator with the tag WUX. The implementation consists in\ncalling the function for each registered extension.\n\nThe wrappers that want to hook the SCADE Simulator, or to be compatible with\nthe Generic Integration wrapper, must create a\nstatic instance of a class deriving from CWuxSimulatorExtension.\n\nThe constructor automatically registers the instance to the list of hooks.\nAll the functions have an empty implementation by default.\n\nWhen EXTENDED_SIM is defined, the source defines a specific instance of\nCWuxSimulatorExtension that calls the former global hooks to ensure the\ncompatibility with the existing services, especially the simulation with\ngraphical panels.\n\nThe example hereafter shows the usage of this feature by some wrapper:\n\nThe _ReadData() function retrieves data from the environment and copies\nthe values to the context of the root operators.\nThe _WriteData() function does the reverse.\n\nThe initialization/termination of the external environment has no more to be\ndone in DllMain, which often leads to thread issues.\n\nThis design allows using graphical panels in the Simulation. Or not.\n\nAll target wrappers embedding these extensions must define the preprocessor\ndirective WUX_STANDALONE. In other words, the macro WUX_STANDALONE\nis not defined if and only if the extension is used in the context of the\nSCADE Simulator."},{"objectID":"Home","href":"usage/services.html#dllmain-extension","title":"Generation services > DllMain extension","text":"DllMain extension\n\nThis generation service (WUX2_DLL_EXT) does not generate new files,\nbut allows several services to subscribe to DllMain. It is used by\ngeneration services that produce a DLL instead of a standalone executable.\n\nA wrapper which needs an access to DllMain must include\n/runtime/dllext and define a static instance of a class deriving\nfrom CWuxDllInstance.\n\nThe constructor automatically registers the instance to the list of hooks.\n\nAll the functions have an empty implementation by default.\n\nThe directory containing /runtime/dllext is declared to the\nCode Generator.\n\nThe lib/WuxDllExt.cpp resource file is declared to the Code Generator with\nthe tag WUX."},{"objectID":"Home","href":"api/ansys/scade/wux/unregister/unregister.html#ansysscadewuxunregisterunregister","title":"ansys.scade.wux.unregister.unregister","text":"ansys.scade.wux.unregister.unregister\n\n\n\nansys.scade.wux.unregister.unregister() -> Tuple[int, str]\n\nImplement the ansys.scade.registry/unregister entry point."},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to Ansys SCADE Wrapper Tools.\n\nThe following contribution information is specific to Ansys SCADE Wrapper Tools."},{"objectID":"Contribute","href":"contributing.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nInstalling Ansys SCADE Wrapper Tools in developer mode allows you to modify the\nsource and enhance it.\n\nClone the ansys-scade-wux repository:\n\nAccess the scade-wux directory where the repository has been cloned:\n\nCreate a clean Python 3.10 environment and activate it:\n\nYou can use the interpreter delivered with Ansys SCADE. For example,\nC:\\Program Files\\ANSYS Inc\\v241\\SCADE\\contrib\\Python310\\python.exe.\n\nMake sure that you have the latest required build system, documentation, testing,\nand CI tools:\n\nInstall doxygen\n\nhttps://www.doxygen.nl/download.html\n\nInstall the project in editable mode:\n\nUse tox to verify your development installation:"},{"objectID":"Contribute","href":"contributing.html#unit-test","title":"Contribute > Unit test","text":"Unit test\n\nAnsys SCADE Wrapper Tools uses tox for testing. This tool allows you to\nautomate common development tasks (similar to Makefile), but it is oriented\ntowards Python development."},{"objectID":"Contribute","href":"contributing.html#use-tox","title":"Contribute > Use tox","text":"Use tox\n\nWhile Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\n\nThe following tox commands are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e py: Checks for unit tests.\n\ntox -e py-coverage: Checks for unit testing and code coverage.\n\ntox -e doc: Checks for the documentation-building process."},{"objectID":"Contribute","href":"contributing.html#use-raw-testing","title":"Contribute > Use raw testing","text":"Use raw testing\n\nIf required, from the command line, you can call style commands like\nruff. You can also call unit testing commands like pytest.\nHowever, running these commands does not guarantee that your project is being tested in an\nisolated environment, which is the reason why tools like tox exist."},{"objectID":"Contribute","href":"contributing.html#use-pre-commit","title":"Contribute > Use pre-commit","text":"Use pre-commit\n\nAnsys SCADE Wrapper Tools follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run the following commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nFor building documentation, you can run the usual rules provided in the\nSphinx make file. Here are some examples:\n\nHowever, the recommended way of checking documentation integrity is to use\ntox:"},{"objectID":"Contribute","href":"contributing.html#debug-and-integration-test","title":"Contribute > Debug and integration test","text":"Debug and integration test\n\nAnsys SCADE Wrapper Tools needs to be registered to SCADE for integration testing.\nIndeed, the generation modules are called from a SCADE code generator session."},{"objectID":"Contribute","href":"contributing.html#install-in-user-mode","title":"Contribute > Install in user mode","text":"Install in user mode\n\nIt is not possible to reuse the virtual environment setup for the repository.\nYou must install the package in an environment accessible by SCADE, for\nexample its own Python distribution, although this is not advised,\nor the Python 3.10 user distribution:\n\nYou can reuse any <install>\\SCADE\\contrib\\Python310\\python.exe\nor Python 3.10 installation on your computer.\n\nIf you are using Ansys SCADE 2024 R2 or below, you must perform one additional\nstep, to install a registration file in %APPDATA%\\SCADE\\Customize:"},{"objectID":"Contribute","href":"contributing.html#debug","title":"Contribute > Debug","text":"Debug\n\nThe .\\tests\\Debug\\debug.py script uses internal SCADE Code Generator entry points\nto start a debug session for the scripts.\n\nYou must use the Python 3.10 environment delivered with SCADE, located in\n<install>\\contrib\\Python310.\n\nFor example:\nC:\\Program Files\\ANSYS Inc\\v251\\SCADE\\contrib\\Python310.\n\nConfigure PYTHONPATH to refer to <install>\\SCADE\\bin and\n<install>\\SCADE\\APIs\\Python\\lib. For example:\n\nRefer to .\\tests\\Debug\\debug.py for its command line parameters."},{"objectID":"Contribute","href":"contributing.html#run-the-integration-tests","title":"Contribute > Run the integration tests","text":"Run the integration tests\n\nThese are manual tests. Refer to the test procedures, contained in each test\ndirectory as readme files."},{"objectID":"Contribute","href":"contributing.html#uninstall","title":"Contribute > Uninstall","text":"Uninstall\n\nOnce the test or debug sessions are completed, you may uninstall the package\nas follows:\n\nIf you are using Ansys SCADE 2024 R2 or below, you should remove the\nregistration file:"},{"objectID":"Contribute","href":"contributing.html#distribute","title":"Contribute > Distribute","text":"Distribute\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then, execute the build module:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the Ansys SCADE Wrapper Tools Issues\npage to submit questions, report bugs, and request new features. When possible, use\nthese templates:\n\nBug, problem, error: for filing a bug report\n\nDocumentation error: for requesting modifications to the documentation\n\nAdding an example: for proposing a new example\n\nNew feature: for requesting enhancements to the code\n\nIf your issue does not fit into one of these template categories, click\nthe link for opening a blank issue.\n\nTo reach the project support team, email pyansys.core@ansys.com.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/gen_includes.html#ansysscadewuxwuxgen_includes","title":"ansys.scade.wux.wux.gen_includes","text":"ansys.scade.wux.wux.gen_includes\n\n\n\nansys.scade.wux.wux.gen_includes(f: io.TextIOBase, files: List[str])\n\nWrite C include directives for a list of files.\n\nThe function prefixes the include directives with /* includes */.\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nfiles\n\nList[python:str]\n\nList of files to be included."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/add_sources.html#ansysscadewuxwuxadd_sources","title":"ansys.scade.wux.wux.add_sources","text":"ansys.scade.wux.wux.add_sources\n\n\n\nansys.scade.wux.wux.add_sources(paths: List[pathlib.Path])\n\nRequest the Code Generator to add sources files to the Makefile for C build.\n\nThe source files are associated to the virtual service WUX:\nUse the dependency WUX to declare a new target containing the sources\nfrom the generation services, either generated ones or runtime files.\n\nThis function may be called by different generation services.\nIt caches the added sources so that they are not added twice to the makefile.\n\nRefer to add_c_files under Adding Make Directives in section 3\nof the SCADE Python API Guide in the SCADE Suite documentation.\n\nParameters\n\npaths\n\nList[Path]\n\nPaths of the C/C++ sources files to be added to the makefile."},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/GoWrapper.html#gowrapper","title":"GoWrapper","text":"GoWrapper\n\n\n\nclass ansys.scade.wux.gowrapper.GoWrapper\n\nImplements the Generic Integration (WUX2_GOWRP) generation module.\n\nRefer to Wrapper to for its usage.\n\nRefer to Generation Module in the User Documentation,\nsection 3/ Code Integration Toolbox/Declaring Code Generator Extension."},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/GoWrapper.html#overview","title":"GoWrapper > Overview","text":"Overview\n\nConstructors\n\n\n\n\n\nget_services\n\nDeclare the generation service GoWrapper.\n\nMethods\n\n\n\n\n\ngenerate\n\nGenerate the code for this generation service.\n\ninit\n\nDeclare the required generation services and the execution order."},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/GoWrapper.html#import-detail","title":"GoWrapper > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/scade/wux/gowrapper/GoWrapper.html#method-detail","title":"GoWrapper > Method detail","text":"Method detail\n\n\n\nGoWrapper.generate(target_dir: str, project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration)\n\nGenerate the code for this generation service.\n\nRefer to Generation Service in section 3 of the SCADE Python API Guide\nin the SCADE Suite documentation.\n\nParameters\n\ntarget_dir\n\npython:str\n\nTarget directory for the code generation.\n\nproject\n\nProject\n\nInput SCADE Suite project.\n\nconfiguration\n\nconfiguration\n\nSCADE Suite configuration selected for the code generation.\n\n\n\nclassmethod GoWrapper.get_services()\n\nDeclare the generation service GoWrapper.\n\n\n\nGoWrapper.init(target_dir: str, project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration)\n\nDeclare the required generation services and the execution order.\n\nRefer to Generation Service in section 3 of the SCADE Python API Guide\nin the SCADE Suite documentation.\n\nParameters\n\ntarget_dir\n\npython:str\n\nTarget directory for the code generation.\n\nproject\n\nProject\n\nInput SCADE Suite project.\n\nconfiguration\n\nconfiguration\n\nSCADE Suite configuration selected for the code generation."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/reset.html#ansysscadewuxwuxreset","title":"ansys.scade.wux.wux.reset","text":"ansys.scade.wux.wux.reset\n\n\n\nansys.scade.wux.wux.reset()\n\nReset the global module’s global variables.\n\nUsed for unit testing."},{"objectID":"Home","href":"usage/extension.html#extension","title":"Extension","text":"Extension"},{"objectID":"Home","href":"usage/extension.html#overview","title":"Extension > Overview","text":"Overview\n\nThe C/C++ Simulation Hooks extension is a SCADE extension that\nbundles Simulator extension and\nContext generation services.\nIt does not generate code.\n\nIt avoids defining a Code Generator extension when you don’t need to\ngenerate integration code from the model."},{"objectID":"Home","href":"usage/extension.html#usage","title":"Extension > Usage","text":"Usage\n\nOnce the extension is activated, you can add your own simulation hooks\nimplemented as classes derived from CWuxSimulatorExtension:\n\nCreate a C++ file defining an instance of CWuxSimulatorExtension and\noverride the required functions.\n\nRefer to Simulator extension\nfor details.\n\nAdd the file to your project.\n\nDeclare it as Source File for C."},{"objectID":"Home","href":"runtime/simuext.html#wuxsimuexth","title":"WuxSimuExt.h","text":"WuxSimuExt.h\n\nInterfaces for standalone executables or simulation DLL extensions. \n\nDefines\n\n\n\nSIM_INFO\n\n“Information” level for WuxLogf \n\n\n\nSIM_WARNING\n\n“Warning” level for WuxLogf \n\n\n\nSIM_ERROR\n\n“Error” level for WuxLogf \n\nFunctions\n\n\n\nvoid WuxLogf(int nLevel, const char *pszFormat, ...)\n\nLog a message. \n\nThe message is logged to the standard output, or to the Simulator tab of the output window when the target is the SCADE Simulator.\n\nParameters\n\nnLevel – SIM_INFO, SIM_WARNING or SIM_ERROR \n\npszFormat – Format control \n\n... – Optional arguments \n\n\n\nint WuxGetExtensionsCount()\n\nReturn the number of registered extensions. \n\nReturns\n\nint \n\n\n\nCWuxSimulatorExtension **WuxGetExtensions()\n\nReturn the array of the registered extensions. \n\nThe number of elements is provided by WuxGetExtensionsCount. \n\nReturns\n\nCWuxSimulatorExtension** \n\n\n\nclass CWuxSimulatorExtension\n\nBase class for extending a standalone executable or a SCADE simulation DLL. \n\nThis class provides two interfaces:\n\nCallbacks for the integrating application, for example the SCADE Simulator or the Generic Integration wrapper’s standalone executable.\n\nExtended callbacks for integration applications other than the SCADE Simulator. \n\nPublic Functions\n\n\n\nCWuxSimulatorExtension()\n\nConstruct the instance and registers it. \n\n\n\nvirtual ~CWuxSimulatorExtension()\n\nUnregister the instance. \n\n\n\nvirtual void BeforeSimInit()\n\nProcess the notification BeforeSimInit. \n\nThis notification is sent before the initialization of the generated code, either from SCADE Suite or from SCADE Display.\n\nThe default implementation is empty. \n\n\n\nvirtual void AfterSimInit()\n\nProcess the notification AfterSimInit. \n\nThis notification is sent after the initialization of the generated code, either from SCADE Suite or from SCADE Display.\n\nThe default implementation is empty. \n\n\n\nvirtual void BeforeSimStep()\n\nProcess the notification BeforeSimStep. \n\nThis notification is sent before the call to the cyclic function of the root operators.\n\nThe default implementation is empty. \n\n\n\nvirtual void AfterSimStep()\n\nProcess the notification AfterSimStep. \n\nThis notification is sent after the call to the cyclic function of the root operators.\n\nThe default implementation is empty. \n\n\n\nvirtual void ExtendedSimStop()\n\nProcess the notification ExtendedSimStop. \n\nThis notification is sent when the main loop exits.\n\nThe default implementation is empty. \n\n\n\nvirtual void ExtendedGatherDumpData(char *pData)\n\nRetrieve additional dump data. \n\nThis function is called by the SCADE Simulator and its purpose is unclear.\n\nThe default implementation is empty. \n\n\n\nvirtual void ExtendedRestoreDumpData(const char *pData)\n\nRestore additional dump data. \n\nThis function is called by the SCADE Simulator and its purpose is unclear.\n\nThe default implementation is empty. \n\n\n\nvirtual int ExtendedGetDumpSize()\n\nReturn the size of additional dump data. \n\nThis function is called by the SCADE Simulator and its purpose is unclear.\n\nThe default implementation returns 0. \n\n\n\nvirtual void UpdateValues()\n\nProcess the notification UpdateValues. \n\nThis function is called by the SCADE Simulator and its purpose is unclear.\n\nThe default implementation is empty. \n\n\n\nvirtual void UpdateSimulatorValues()\n\nProcess the notification UpdateSimulatorValues. \n\nThis function is called by the SCADE Simulator and its purpose is unclear.\n\nThe default implementation is empty. \n\n\n\nvirtual const char *GetIdent()\n\nReturn the identifier of the extension. \n\nThe default implementation returns \"<none>\". \n\nReturns\n\nconst char* \n\n\n\nvirtual bool IntegrationStart(int argc, char *argv[])\n\nProcess the notification IntegrationStart. \n\nThis function is called at startup, when the target is not the SCADE Simulator. It allows accessing the command line parameters specified when running the standalone executable.\n\nReturn false to stop the process, otherwise true.\n\nThe default implementation is empty and returns true.\n\nParameters\n\nargc – number of parameters \n\nargv – array of parameters @ return bool \n\n\n\nvirtual void IntegrationStop()\n\nProcess the notification IntegrationStop. \n\nThis function is called before the process stops, when the target is not the SCADE Simulator.\n\nThe default implementation is empty. \n\n\n\nvirtual bool SelfPaced()\n\nReturn whether the extension has its own synchronization mechanism. \n\nWhen none of the registered extensions returns true, the integration uses the specified period to clock the main loop.\n\nThis function is not called when the target is the SCADE Simulator.\n\nThe default implementation returns false. \n\n\n\nvirtual bool IsAlive()\n\nReturn whether the extension is alive. \n\nThe process stops as soon as a registered extension returns false. For example, when a connection is closed.\n\nThis function is not called when the target is the SCADE Simulator.\n\nThe default implementation returns true. "},{"objectID":"Home","href":"api/ansys/scade/wux/wux/add_definitions.html#ansysscadewuxwuxadd_definitions","title":"ansys.scade.wux.wux.add_definitions","text":"ansys.scade.wux.wux.add_definitions\n\n\n\nansys.scade.wux.wux.add_definitions(*definitions: str)\n\nRequest the Code Generator to add preprocessor definitions to the Makefile.\n\nThis function may be called by different generation services.\nIt caches the added definitions so that they are not added twice to the makefile.\n\nRefer to add_preprocessor_definitions under Adding Make Directives\nin section 3 of the SCADE Python API Guide in the SCADE Suite documentation.\n\nParameters\n\n*definitions\n\npython:str\n\nPreprocessor definitions to be added to the makefile."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/writeln.html#ansysscadewuxwuxwriteln","title":"ansys.scade.wux.wux.writeln","text":"ansys.scade.wux.wux.writeln\n\n\n\nansys.scade.wux.wux.writeln(f: io.TextIOBase, num_tabs: int = 0, text: str = '')\n\nWrite a text with a level of indentation.\n\nThe function writes four (4) spaces per level of indentation.\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nnum_tabs\n\npython:int\n\nLevel of indentation.\n\ntext\n\npython:str\n\nInput text."},{"objectID":"Home","href":"usage/index.html#user-guide","title":"User guide","text":"User guide\n\n"},{"objectID":"Home","href":"runtime/dllext.html#wuxdllexth","title":"WuxDllExt.h","text":"WuxDllExt.h\n\nInterfaces for subscribing to DllMain callbacks. \n\nThe lib/WuxDllExt.cpp runtime file defines DllMain and calls all the registered clients.\n\nThis is relevant if and only if the target is a DLL and not a standalone executable. \n\nFunctions\n\n\n\nint WuxGetDllInstancesCount()\n\nReturn the number of registered clients. \n\nReturns\n\nint \n\n\n\nCWuxDllInstance **WuxGetDllInstances()\n\nReturn the array of the registered clients. \n\nThe number of elements is provided by WuxGetDllInstancesCount. \n\nReturns\n\nCWuxDllInstance** \n\n\n\nHMODULE WuxGetDllInstance()\n\nReturn the instance of the DLL. \n\nThis handle is cached when DllMain is called with the reason DLL_PROCESS_ATTACH. \n\nReturns\n\nHMODULE \n\n\n\nclass CWuxDllInstance\n\nBase class for DllMain clients. \n\nPublic Functions\n\n\n\nCWuxDllInstance()\n\nConstruct the instance and register it to DllMain. \n\n\n\nvirtual ~CWuxDllInstance()\n\nUnregister the instance from DllMain. \n\n\n\nvirtual BOOL OnProcessAttach(HMODULE hDllInstance)\n\nProcess the DLL_PROCESS_ATTACH notification. \n\nReturn TRUE on success, otherwise FALSE.\n\nThe default implementation is empty and returns True. \n\nReturns\n\nbool \n\n\n\nvirtual BOOL OnThreadAttach(HMODULE hDllInstance)\n\nProcess the DLL_THREAD_ATTACH notification. \n\nReturn TRUE on success, otherwise FALSE.\n\nThe default implementation is empty and returns True. \n\nReturns\n\nbool \n\n\n\nvirtual BOOL OnThreadDetach(HMODULE hDllInstance)\n\nProcess the DLL_THREAD_DETACH notification. \n\nReturn TRUE on success, otherwise FALSE.\n\nThe default implementation is empty and returns True. \n\nReturns\n\nbool \n\n\n\nvirtual BOOL OnProcessDetach(HMODULE hDllInstance)\n\nProcess the DLL_PROCESS_DETACH notification. \n\nReturn TRUE on success, otherwise FALSE.\n\nThe default implementation is empty and returns True. \n\nReturns\n\nbool "},{"objectID":"Home","href":"api/ansys/scade/wux/wux/add_cpp_options.html#ansysscadewuxwuxadd_cpp_options","title":"ansys.scade.wux.wux.add_cpp_options","text":"ansys.scade.wux.wux.add_cpp_options\n\n\n\nansys.scade.wux.wux.add_cpp_options(project: scade.model.project.stdproject.Project, configuration: scade.model.project.stdproject.Configuration)\n\nAdd the required compiler/linker options for C++ code.\n\nThis is required for GNU C: -static -lstdc++\n\nThere is no API in scade.code.suite.* to achieve this. The workaround\nconsists in adding the option to the project for the given configuration.\n\nThe option is set only if the current compiler is GNU C.\n\nThe project is modified but it is not expected to be saved in this context.\nShould it be saved, this is still fine since the option is mandatory.\n\nParameters\n\nproject\n\nProject\n\nInput project.\n\nconfiguration\n\nConfiguration\n\nInput configuration."},{"objectID":"Home","href":"usage/wrapper.html#wrapper","title":"Wrapper","text":"Wrapper"},{"objectID":"Home","href":"usage/wrapper.html#overview","title":"Wrapper > Overview","text":"Overview\n\nThe wrapper Generic Integration is a SCADE target designed to host any\nnumber of extensions. It has a behavior comparable to the SCADE Simulator:\n\nIt manages the graphical panels, UAs and/or A661 server connections\nwhen available.\n\nIt manages the registered extensions, for example instances of classes\nderived from CWuxSimulatorExtension through calls to the WuxXxx\nsimulation hooks.\n\nThe wrapper does not generate code: it provides the main function,\ndefined in WuxGoMain.cpp, and declares a target to the build system with\nthe files generated by KCG and those added by the generation services with\nthe tag WUX.\n\nThe lib/WuxGoMain.cpp resource file is declared to the Code Generator\nwith the tag WUX."},{"objectID":"Home","href":"usage/wrapper.html#interface","title":"Wrapper > Interface","text":"Interface\n\nThe extensions can redefine the following functions:\n\nGetIdent: Identifier of the extension, for error reporting or\ndiscrimination.\n\nIntegrationStart: argc/argv are the command line parameters of\nthe executable, no filter is applied. Returns false to stop the process.\n\nIntegrationStop: Called just before the process terminates.\n\nSelfPaced: Returns true if the extension is scheduled by\nthe environment, for example by waiting for some event in the\nBeforeSimStep function.\n\nIsAlive: Returns false to stop the process.\n\nRefer to usage/services:Simulator extension for more information about\nthe CWuxSimulatorExtension class."},{"objectID":"Home","href":"usage/wrapper.html#main-loop-period","title":"Wrapper > Main loop period","text":"Main loop period\n\nWhen no extension is self-paced, the period is the one defined in the\nCode Generator Integration settings; Else, the period can be specified\non the command line with the option -latency (ms) otherwise it is 0.\n\nThe behavior is unclear when several extensions are registered and if at\nleast one of them is self-paced.\nFor a project involving conflicting extensions, it is advised to provide a\ncustomized version of lib/WuxGoMain.cpp to implement the desired\nscheduling and interactions between the required extensions."},{"objectID":"Home","href":"index.html#ansys-scade-wrapper-tools","title":"Ansys SCADE Wrapper Tools","text":"Ansys SCADE Wrapper Tools\n\nRefer to Generating Integration Code in section 3 of the SCADE Python API Guide\nin the SCADE Suite documentation for a complete reference on SCADE Code Generator extensions,\nalso known as wrappers.\n\nThis package contains:\n\nA SCADE Code Generator extension, Generic Integration, that produces\na standalone executable and schedules optional additional wrappers.\n\nA SCADE Code Generator extension, C/C++ Simulation Hooks, that allows\nhooking Simulator functions.\n\nUtility SCADE Code Generator generation services that can be involved\nby wrappers.\n\nA Python library for developing wrappers.\n\n Getting started\n\nLearn how to install and use Ansys SCADE Wrapper Tools.\n\ngetting-started/index\n\n User guide\n\nLearn how to use the Ansys SCADE Wrapper Tools.\n\nusage/index\n\n API reference\n\nExplore the Ansys SCADE Wrapper Tools API.\n\napi/index\n\n Runtime\n\nLearn reference for the C/C++ interfaces\n\nruntime/index\n\n Contributing\n\nLearn how to contribute to the Ansys SCADE Wrapper Tools.\n\ncontributing\n\n Changelog\n\nView the changelog for the Ansys SCADE Wrapper Tools.\n\nchangelog\n\n"},{"objectID":"Home","href":"index.html#indices-and-tables","title":"Ansys SCADE Wrapper Tools > Indices and tables","text":"Indices and tables\n\ngenindex\n\nmodindex\n\nsearch"},{"objectID":"Home","href":"api/ansys/scade/wux/wux/gen_end_protect.html#ansysscadewuxwuxgen_end_protect","title":"ansys.scade.wux.wux.gen_end_protect","text":"ansys.scade.wux.wux.gen_end_protect\n\n\n\nansys.scade.wux.wux.gen_end_protect(f: io.TextIOBase, name: str)\n\nWrite the end of a protection macro for a C header file.\n\nThe dots (.) present in name are replaced by underscores (_).\n\nThe name of the macro is uppercase.\n\nThe function writes the following snippet:\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nname\n\npython:str\n\nName of the preprocessor macro."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/add_includes.html#ansysscadewuxwuxadd_includes","title":"ansys.scade.wux.wux.add_includes","text":"ansys.scade.wux.wux.add_includes\n\n\n\nansys.scade.wux.wux.add_includes(paths: List[pathlib.Path])\n\nRequest the Code Generator to add include directories directives to the Makefile.\n\nThis function may be called by different generation services.\nIt caches the added include directories so that they are not added twice to the makefile.\n\nRefer to add_include_files under Adding Make Directives in section 3\nof the SCADE Python API Guide in the SCADE Suite documentation.\n\nParameters\n\npaths\n\nList[Path]\n\nPaths of the include directories to be added to the makefile."},{"objectID":"Home","href":"api/ansys/scade/wux/wux/gen_start_protect.html#ansysscadewuxwuxgen_start_protect","title":"ansys.scade.wux.wux.gen_start_protect","text":"ansys.scade.wux.wux.gen_start_protect\n\n\n\nansys.scade.wux.wux.gen_start_protect(f: io.TextIOBase, name: str)\n\nWrite the beginning of a protection macro for a C header file.\n\nThe dots (.) present in name are replaced by underscores (_).\n\nThe name of the macro is uppercase.\n\nThe function writes the following snippet:\n\nParameters\n\nf\n\nTextIOBase\n\nOutput file to write to.\n\nname\n\npython:str\n\nName of the preprocessor macro."}]