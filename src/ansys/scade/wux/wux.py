# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""Utility classes and functions for developing wrappers."""

from pathlib import Path
from typing import List, Optional

from scade.code.suite.mapping.c import MappingFile
import scade.code.suite.sctoc as sctoc
from scade.code.suite.wrapgen.c import InterfacePrinter
from scade.code.suite.wrapgen.model import MappingHelpers


class Wux:
    """TODO."""

    def __init__(self):
        """TODO."""
        # context
        self.mf: Optional[MappingFile] = None
        self.mh: Optional[MappingHelpers] = None
        self.ips: list[InterfacePrinter] = []

        # generated C files, for makefile
        self._sources: set[str] = set()
        # build
        self._libraries: set[str] = set()
        self._includes: set[str] = set()
        self._definitions: set[str] = set()

    # store the declared source files for backward compatibility
    # and prevent adding the same source twice to sctoc
    def add_sources(self, paths: list[Path]):
        """TODO."""
        paths = {_.as_posix() for _ in paths}
        sctoc.add_c_files(list(paths - self._sources), False, 'WUX')
        self._sources |= paths

    # store the declared include paths for backward compatibility
    # and prevent adding the same include twice to sctoc
    def add_includes(self, paths: List[Path]):
        """TODO."""
        paths = {_.as_posix() for _ in paths}
        sctoc.add_include_files(list(paths - self._includes), False)
        self._includes |= paths

    # store the declared libraries for backward compatibility
    # and prevent adding the same library twice to sctoc
    def add_libraries(self, paths: List[Path]):
        """TODO."""
        paths = {_.as_posix() for _ in paths}
        sctoc.add_obj_files(list(paths - self._libraries), False)
        self._libraries |= paths

    # prevent adding the preprocessor definition twice to sctoc
    def add_definitions(self, *definitions: str):
        """TODO."""
        definitions = {_ for _ in definitions}
        sctoc.add_preprocessor_definitions(*(definitions - self._definitions))
        self._definitions |= definitions

    # # compatibility
    # @property
    # def sources(self):
    #     return list(self._sources)
    #
    #
    # @property
    # def includes(self):
    #     return list(self._includes)
    #
    #
    # @property
    # def libraries(self):
    #     return list(self._libraries)


# globals
wux = Wux()


def writeln(f, nbtabs: int = 0, text: str = ''):
    """TODO."""
    f.write('    ' * nbtabs)
    f.write(text)
    f.write('\n')


def write_indent(f, tab: str, text: str):
    """TODO."""
    if text != '':
        f.write(tab)
        f.write(('\n' + tab).join(text.strip('\n').split('\n')))
        f.write('\n')


def gen_start_protect(f, name: str):
    """TODO."""
    macro = '_' + name.replace('.', '_').upper() + '_'
    writeln(f, 0, '#ifndef {0}\n#define {0}'.format(macro))
    writeln(f)


def gen_end_protect(f, name: str):
    """TODO."""
    macro = '_' + name.replace('.', '_').upper() + '_'
    writeln(f, 0, '#endif /* {0} */'.format(macro))
    writeln(f)


def gen_header(f, banner: str, start_comment: str = '/* ', end_comment: str = ' */'):
    """TODO."""
    writeln(f, 0, '{1}generated by {0}{2}'.format(banner, start_comment, end_comment))
    writeln(f)


def gen_footer(f):
    """TODO."""
    writeln(f, 0, '/* end of file */')


def gen_includes(f, files: List[str]):
    """TODO."""
    writeln(f, 0, '/* includes */')
    for file in files:
        writeln(f, 0, '#include "%s"' % file)
    writeln(f)
